{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","tempMax","tempMin","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dde03f18.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./weather.style.css\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n        </h5>\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n        {/** show min max temperature */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 mt-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City or Country\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import Weather from \"./components/weather.component\";\nimport Form from \"./components/form.component\";\nimport \"weather-icons/css/weather-icons.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\n\nconst apiKey = \"1eb62e713799bf157c492cb3a1c4e12f\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      description: \"\",\n      error: false,\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`\n      );\n\n      const response = await api_call.json();\n\n      console.log(response);\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        celsius: this.calCelsius(response.main.temp),\n        tempMax: this.calCelsius(response.main.temp_max),\n        tempMin: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false,\n      });\n\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState({\n        error: true,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_min={this.state.tempMin}\n          temp_max={this.state.tempMax}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}